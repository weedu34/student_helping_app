# Generated by Django 5.2.1 on 2025-05-27 11:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('nationality', models.CharField(choices=[('US', 'United States'), ('IN', 'India'), ('CN', 'China'), ('BR', 'Brazil'), ('TR', 'Turkey'), ('RU', 'Russia'), ('MX', 'Mexico'), ('OTHER', 'Other')], default='OTHER', max_length=50)),
                ('university', models.CharField(blank=True, choices=[('TU_BERLIN', 'Technical University Berlin'), ('LMU_MUNICH', 'Ludwig Maximilian University Munich'), ('HEIDELBERG', 'University of Heidelberg'), ('TU_MUNICH', 'Technical University Munich'), ('HAMBURG', 'University of Hamburg'), ('FRANKFURT', 'Goethe University Frankfurt'), ('COLOGNE', 'University of Cologne'), ('OTHER', 'Other')], max_length=100)),
                ('student_id', models.CharField(blank=True, max_length=50)),
                ('course_of_study', models.CharField(blank=True, max_length=200)),
                ('expected_graduation', models.DateField(blank=True, null=True)),
                ('intended_city', models.CharField(blank=True, max_length=100)),
                ('arrival_date', models.DateField(blank=True, null=True)),
                ('arrival_airport', models.CharField(blank=True, max_length=10)),
                ('arrival_status', models.CharField(choices=[('PLANNING', 'Planning to arrive'), ('ARRIVED', 'Already arrived'), ('RESIDING', 'Already residing in Germany')], default='PLANNING', max_length=20)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=200)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('profile_completed', models.BooleanField(default=False)),
                ('registration_completed', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
